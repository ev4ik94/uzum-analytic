import {Command} from "./command.class";

import {Markup, Telegraf} from "telegraf";
import {IBotContext, IFinanceData, IHistoryRequest} from "../context/context.interface";
import UpdatesService from "../services/updates.service";
import FinanceSevice from "../services/finance.sevice";
import {DateFormatter, HTMLFormatter, month, NumReplace} from "../utils";



// const UpdateService = new UpdatesService()
const financeServices = new FinanceSevice()



export class FinanceCommand extends Command{

    constructor(bot:Telegraf<IBotContext>) {
        super(bot);
    }

    handle() {

        this.bot.hears('/finance', async(ctx)=>{
            const response_data:IFinanceData = await financeServices.getFinanceInfo(ctx)
            const history_data = await financeServices.requestHistory(ctx)
console.log(history_data)
console.log(response_data)
            if(history_data&&response_data){
                const {inProcessingCount, withdrawList} = history_data

                let message = ''
                let message_history = ''

                let date_now = new Date()
                let month_current = date_now.getMonth()

                message+=HTMLFormatter([
                    `/n/s‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É:  ${NumReplace(response_data.forWithdraw+'')} —Å—É–º/s/n/n`,
                    `/büïò –í –æ–±—Ä–∞–±–æ—Ç–∫–µ:  ${NumReplace(response_data.processing+'')} —Å—É–º/b/n/n`,
                    `/b‚ùå –í–æ–∑–≤—Ä–∞—Ç—ã:  ${NumReplace(response_data.cancelled+'')} —Å—É–º/b/n/n`,
                    `/büóì –í—ã–≤–µ–¥–µ–Ω–æ –∑–∞ ${month[month_current]}:  ${NumReplace(response_data.withdrawnForCurrentMonth+'')} —Å—É–º/b/n/n`,
                    `/b‚è∫ –í—ã–≤–µ–¥–µ–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:  ${NumReplace(response_data.withdrawn+'')} —Å—É–º/b/n/n`
                ])

                message_history+=HTMLFormatter([
                    `/n/s–í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–≤–æ–¥–∞: ${inProcessingCount}/s/n-----------------------------------------------/n`,
                ])




                withdrawList.forEach((item:IHistoryRequest)=>{
                    message_history+=HTMLFormatter([
                        `/b–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:                      ${NumReplace(item.amount+'')} —Å—É–º/b/n`,
                        `/b${DateFormatter(new Date(item.createdDate))}    ${item.status==='APPROVED'?'‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω':item.status==='CREATED'?'üïò –í –æ–±—Ä–∞–±–æ—Ç–∫–µ':'‚ùå –û—Ç–º–µ–Ω–µ–Ω'}/b/n/n`,
                    ])
                })
                await ctx.replyWithHTML(message)
                await ctx.replyWithHTML(message_history)
            }else{
                await ctx.replyWithHTML('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
            }


        })


    }
}