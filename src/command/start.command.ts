import {Command} from "./command.class";
import {Telegraf, Markup} from "telegraf";
import {IBotContext} from "../context/context.interface";
import {ApiError} from "../utils/ErrorHandler";
import {IStateManager} from "../config/config.interface";





export class StartCommand extends Command{
    state:IStateManager
    constructor(bot:Telegraf<IBotContext>, stateManager:IStateManager) {
        super(bot);
        this.state = stateManager
    }

    handle() {
        const regexp_signout = new RegExp(/^signout/)
        this.bot.start(async(ctx)=>{


            if(!ctx.session.token){

                // if(ctx.message.from.username==='eva_4eva') {
                //     ctx.session.token = 'ZvF2QEdLAhGxEOXeM3yO0KKmOOM'
                //
                // }

                return await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', {
                    reply_markup:{
                        inline_keyboard: [
                            [{text: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', web_app:{url:process.env.FRONT_URL!}}]
                        ]
                    },

                })

            }else{
                //await ctx.replyWithHTML('–í –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—ã–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã ')
                await ctx.replyWithHTML('–ë–æ—Ç —Å–Ω–æ–≤–∞ –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å!')
            }


        })


        this.bot.action('sign-out', async(ctx)=>{
            const buttons = Markup.inlineKeyboard([
                [Markup.button.callback('–î–∞', 'signoutYES'), Markup.button.callback('–ù–µ—Ç', 'signoutNO')]
            ])

            await ctx.reply('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?', buttons)
        })

        this.bot.action(regexp_signout, async(ctx)=>{
            try{
                const {update} = ctx
                const {userId} = ctx.session

                //@ts-ignore
                const data = update.callback_query.data
                const action = data.replace(regexp_signout, '')
                if(action==='YES'){
                    //@ts-ignore
                    ctx.session = null
                    this.state.setIsActivate({
                        status: false,
                        message: ''
                    }, userId)

                    await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞, –∂–¥–µ–º –≤–∞—à–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è üòä')
                }else{
                    await ctx.reply('–•–æ—Ä–æ—à–æ —á—Ç–æ –≤—ã –µ—â–µ —Å –Ω–∞–º–∏ üòä')
                }
            }catch(err:any){
                const err_message = `–ú–µ—Ç–æ–¥: Command /signout\n\n–û–®–ò–ë–ö–ê: ${err}`
                await ctx.telegram.sendMessage('@cacheErrorBot', ApiError.errorMessageFormatter(ctx, err_message))
                ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
                throw new Error(err)
            }

        })

        this.bot.action('support', async(ctx)=>{
            await ctx.reply('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏', {
                reply_markup:{
                    inline_keyboard: [
                        [{text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É', web_app:{url:`https://master--dapper-croquembouche-dce9fc.netlify.app/support`}}]
                    ]
                },

            })
        })

        this.bot.action('directory', async(ctx)=>{
            await ctx.replyWithHTML('<strong>–ú–µ–Ω—é</strong>\n' +
                '<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</b> - —Ç–µ —Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø—Ä–æ–¥–∞–∂–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.\n' +
                ' \n' +
                '                                              –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n' +
                '<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚ùóÔ∏è‚ùóÔ∏è‚ùó</b>Ô∏è - –∑–∞–∫–∞–∑ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∫–∞–∂–¥–æ–≥–æ\n' +
                '\n' +
                '<b>–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω üõç</b> -  –ö–ª–∏–µ–Ω—Ç –∑–∞–±—Ä–∞–ª —Å –ü–í–ó –≤–∞—à —Ç–æ–≤–∞—Ä.\n' +
                '\n' +
                '<b>–ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω ‚úÖ</b> - –î–µ–Ω—å–≥–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–Ω—ã –∫ –≤—ã–≤–æ–¥—É.\n' +
                '\n' +
                '<b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå</b> - –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º –ª–∏–±–æ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–±—Ä–∞–ª –≤ —Å—Ä–æ–∫ —Å–≤–æ–π —Ç–æ–≤–∞—Ä —Å –ü–í–ó\n' +
                '\n' +
                '<b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ üíå</b> -  –æ—Ç–∑—ã–≤ –Ω–∞ —Ç–æ–≤–∞—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º\n' +
                '\n' +
                '<b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–¥–æ–±—Ä–µ–Ω üí∏</b> - –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–¥–æ–±—Ä–µ–Ω.\n' +
                '\n' +
                '<b>–¢–æ–≤–∞—Ä –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ üì¶</b> - –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏–Ω—è–ª–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥–∞–∂–µ.\n' +
                '\n' +
                '<b>üì¢ –ë—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏–ª–∏ –ø—Ä–∞–≤–∫–∏ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –±–∞–≥–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π')
        })


        this.bot.hears('/cabinet', async(ctx)=>{
            const buttons = Markup.inlineKeyboard([
                [Markup.button.callback('üôç‚Äç‚ôÇÔ∏è –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', 'support')],
               [Markup.button.callback('üìí –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫', 'directory')],
                [Markup.button.callback('‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', 'sign-out')]
            ])
            await ctx.reply('–ö–∞–±–∏–Ω–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º –±–æ—Ç–∞', buttons)
        })





        this.bot.action('actionNo', ()=>{
            return
        })
    }
}